@import 'sketch-nibui.js';

var run = function(context, isAll) {

    var document = context.document;
    var exportedCount = 0;

    // Preferences
    var defaults = NSUserDefaults.standardUserDefaults();
    var defaultsKey = 'SketchPageExport';
    var defaultsDict = defaults.objectForKey(defaultsKey) ? defaults.objectForKey(defaultsKey).mutableCopy() : NSMutableDictionary.dictionary();

    // Alert nib UI
    var nibui = new NibUI(context, 'UIBundle', 'Alert',
        [ 'path', 'browse', 'format', 'scale', 'bgColor', 'paddingTop', 'paddingLeft', 'paddingRight', 'paddingBottom' ]);

    // Setup alert view
    nibui.path.stringValue = getExportPath();
    nibui.attachTargetAndAction(nibui.browse, function() {
        // Show save panel
        var openPanel = NSOpenPanel.openPanel();
        openPanel.canChooseFiles = false;
        openPanel.canChooseDirectories = true;
        var result = openPanel.runModal();
        if (result == NSFileHandlingPanelOKButton) {
            nibui.path.stringValue = openPanel.URL().path();
        }
    });
    nibui.bgColor.color = getBackgroundColor();
    selectItem(nibui.format, defaultsDict['format']);
    selectItem(nibui.scale, defaultsDict['scale']);
    nibui.paddingTop.stringValue = getPadding(defaultsDict['paddingTop']).toString();
    nibui.paddingLeft.stringValue = getPadding(defaultsDict['paddingLeft']).toString();
    nibui.paddingRight.stringValue = getPadding(defaultsDict['paddingRight']).toString();
    nibui.paddingBottom.stringValue = getPadding(defaultsDict['paddingBottom']).toString();

    // Create alert
    var alert = NSAlert.alloc().init();
    alert.messageText = isAll ? 'Save all pages to...' : 'Save current page to...';
    alert.addButtonWithTitle('Save');
    alert.addButtonWithTitle('Cancel');
    alert.setIcon(NSImage.alloc().initWithContentsOfFile(context.plugin.urlForResourceNamed('AlertIcon.png').path()));
    alert.setAccessoryView(nibui.view);
    alert.window().setInitialFirstResponder(nibui.paddingTop);

    // Display alert and handle result
    var result = alert.runModal();
    if (result == NSAlertFirstButtonReturn) {
        saveDefaults();
        var pagesLoop = context.document.pages().objectEnumerator();
        var currentPage = context.document.currentPage();
        while (item = pagesLoop.nextObject()) {
            if (!isAll && item != currentPage) continue; // Skip if only exporting current page
            if (item.name() == 'Symbols') continue; // Skip Symbols page
            // Create encapsulating artboard
            var artboard = MSArtboardGroup.alloc().initWithFrame(padRect(item.contentBounds()));
            artboard.nodeName = item.name();
            artboard.hasBackgroundColor = true;
            artboard.backgroundColor = MSColor.colorWithNSColor(getBackgroundColor());
            artboard.includeBackgroundColorInExport = true;
            item.insertLayer_atIndex(artboard, 0);
            // Export artboard
            var format = nibui.format.titleOfSelectedItem().toLowerCase();
            var scale = parseInt(nibui.scale.titleOfSelectedItem().substr(1,2)) || 2.0;
            var exportFormat = MSExportFormat.formatWithScale_name_fileFormat(scale, '', format);
            artboard.exportOptions().insertExportFormat_atIndex(exportFormat, 0);
            var exportRequests = MSExportRequest.exportRequestsFromExportableLayer(artboard);
            document.saveExportRequest_toFile(exportRequests[0], getExportPath() + '/' + artboard.nodeName() + '.' + format);
            // Clean up
            item.removeLayerAtIndex(0);
            // Show feedback
            if (!isAll && item == currentPage) {
                document.showMessage(item.name() + ' has been exported');
                break;
            }
            exportedCount++;
            document.showMessage(exportedCount + ' pages have been exported');
        }
    }

    nibui.destroy();

    // Get export path
    function getExportPath() {
        return defaultsDict['exportPath'] ? defaultsDict['exportPath'] : DEFAULT_PATH;
    }

    // Get background color
    function getBackgroundColor() {
        if (!defaultsDict['backgroundColor']) {
            return NSColor.whiteColor();
        }
        var valuesArray = defaultsDict['backgroundColor'].componentsSeparatedByString(' ');
        return NSColor.colorWithDeviceRed_green_blue_alpha(valuesArray[0].floatValue(), valuesArray[1].floatValue(), valuesArray[2].floatValue(), valuesArray[3].floatValue());
    }

    // Make NSPopUpButton select by title
    function selectItem(target, title) {
        if (title != null && target.indexOfItemWithTitle(title) != -1) {
            target.selectItemWithTitle(title);
        }
    }

    // Returns a padding value as number
    function getPadding(val) {
        var num = parseInt(val);
        if (isNaN(num)) return 100;
        if (num < 0) return 0;
        return num;
    }

    // Add paddings to rectangle
    function padRect(rect) {
        rect.origin.x -= getPadding(nibui.paddingLeft.stringValue());
        rect.origin.y -= getPadding(nibui.paddingTop.stringValue());
        rect.size.width += getPadding(nibui.paddingLeft.stringValue()) + getPadding(nibui.paddingRight.stringValue());
        rect.size.height += getPadding(nibui.paddingTop.stringValue()) + getPadding(nibui.paddingBottom.stringValue());
        return rect;
    }

    // Save preferences
    function saveDefaults() {
        defaultsDict['exportPath'] = nibui.path.stringValue();
        var color = nibui.bgColor.color().colorUsingColorSpace(NSColorSpace.deviceRGBColorSpace());
        var colorString = color.redComponent() + ' ' + color.greenComponent() + ' ' + color.blueComponent() + ' ' + color.alphaComponent();
        defaultsDict['backgroundColor'] = colorString;
        defaultsDict['format'] = nibui.format.titleOfSelectedItem();
        defaultsDict['scale'] = nibui.scale.titleOfSelectedItem();
        defaultsDict['paddingTop'] = getPadding(nibui.paddingTop.stringValue());
        defaultsDict['paddingLeft'] = getPadding(nibui.paddingLeft.stringValue());
        defaultsDict['paddingRight'] = getPadding(nibui.paddingRight.stringValue());
        defaultsDict['paddingBottom'] = getPadding(nibui.paddingBottom.stringValue());
        defaults.setObject_forKey(defaultsDict, defaultsKey);
        defaults.synchronize();
    }

}

var exportCurrent = (context) => { run(context); };

var exportAll = (context) => { run(context, true); };
