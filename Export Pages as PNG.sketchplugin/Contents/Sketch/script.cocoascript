var run = function(context, isAll) {

    // General declarations

    var padding = 60

    var document = context.document
    var defaults = NSUserDefaults.standardUserDefaults()
    var defaultsKey = "VDExportPagesToPNG"
    var defaultsDict = defaults.objectForKey(defaultsKey) ? defaults.objectForKey(defaultsKey).mutableCopy() : NSMutableDictionary.dictionary()

    var exportedCount = 0

    // Define alert
    var alert = NSAlert.alloc().init()
    alert.messageText = "Save page to..."
    alert.addButtonWithTitle("Save")
    alert.addButtonWithTitle("Cancel")

    // Define accessory view
    var accessoryView = NSView.alloc().initWithFrame(NSMakeRect(0,0, 336, 56))

    // Path Field
    var pathField = NSTextField.alloc().initWithFrame(NSMakeRect(0, 34, 244, 22))
    pathField.stringValue = pathString()
    pathField.selectable = false
    pathField.bezelStyle = NSTextFieldSquareBezel
    accessoryView.addSubview(pathField)

    // Choose Path Button
    var choosePathButton = NSButton.alloc().initWithFrame(NSMakeRect(246, 28, 96, 32))
    choosePathButton.bezelStyle = NSRoundedBezelStyle
    choosePathButton.setButtonType(NSMomentaryPushInButton)
    choosePathButton.title = "Choose..."
    choosePathButton.setCOSJSTargetFunction(function chooseDirectory() {

                                            // Configuring save panel
                                            var openPanel = NSOpenPanel.openPanel()
                                            openPanel.canChooseFiles = false
                                            openPanel.canChooseDirectories = true

                                            // Launching panel
                                            var result = openPanel.runModal()
                                            if (result == NSFileHandlingPanelOKButton) {
                                                pathField.stringValue = openPanel.URL().path()
                                            }
                                            })
    accessoryView.addSubview(choosePathButton)

    // Background Color Label
    var backgroundColorLabel = NSTextField.alloc().initWithFrame(NSMakeRect(1, 3, 245, 17))
    backgroundColorLabel.stringValue = "Background Color"
    backgroundColorLabel.selectable = false
    backgroundColorLabel.drawsBackground = false
    backgroundColorLabel.bezeled = false
    accessoryView.addSubview(backgroundColorLabel)

    // Background Color Well
    var backgroundColorWell = NSColorWell.alloc().initWithFrame(NSMakeRect(252, 0, 84, 23))
    backgroundColorWell.bordered = true
    backgroundColorWell.color = wellColor()
    accessoryView.addSubview(backgroundColorWell)

    alert.accessoryView = accessoryView

    // Display alert and handle result
    var result = alert.runModal()
    if (result == NSAlertFirstButtonReturn) {
        // Save current values to UserDefaults
        writeCurrentValuesToDefaultsDict()

        // Start working
        var pagesLoop = context.document.pages().objectEnumerator()
        var currentPage = context.document.currentPage()

        while (item = pagesLoop.nextObject()) {
            if (!isAll && item != currentPage) continue;
            if (item.name() == 'Symbols') continue;
            var artboard = MSArtboardGroup.alloc().initWithFrame(rectWithPadding(item.contentBounds()))
            artboard.nodeName = item.name()
            artboard.hasBackgroundColor = true
            artboard.backgroundColor = MSColor.colorWithNSColor(wellColor())
            artboard.includeBackgroundColorInExport = true
            item.insertLayer_atIndex(artboard, 0)

            var exportFormat = MSExportFormat.formatWithScale_name_fileFormat(2.0, "", "png")
            artboard.exportOptions().insertExportFormat_atIndex(exportFormat, 0)
            var exportRequests = MSExportRequest.exportRequestsFromExportableLayer(artboard)
            document.saveExportRequest_toFile(exportRequests[0], pathString() + "/" + artboard.nodeName() + ".png")

            item.removeLayerAtIndex(0)

            if (!isAll && item == currentPage) {
                document.showMessage(item.name() + " has been exported")
                break;
            }

            exportedCount += 1
            document.showMessage(exportedCount + " pages have been exported")
        }



    }

    // Helper functions

    function rectWithPadding(rect) {
        rect.origin.x -= padding
        rect.origin.y -= padding
        rect.size.width += padding * 2
        rect.size.height += padding * 2

        return rect
    }

    function writeCurrentValuesToDefaultsDict() {
        defaultsDict["pathString"] = pathField.stringValue()

        var wellRGBColor = backgroundColorWell.color().colorUsingColorSpace(NSColorSpace.deviceRGBColorSpace());
        var colorString = wellRGBColor.redComponent() + " " + wellRGBColor.greenComponent() + " " + wellRGBColor.blueComponent() + " " + wellRGBColor.alphaComponent()
        defaultsDict["wellColor"] = colorString

        defaults.setObject_forKey(defaultsDict, defaultsKey)
        defaults.synchronize()
    }

    function pathString() {
        return defaultsDict["pathString"] ? defaultsDict["pathString"] : NSHomeDirectory() + "/Desktop"
    }

    function wellColor() {
        if (defaultsDict["wellColor"]) {
            var valuesArray = defaultsDict["wellColor"].componentsSeparatedByString(" ")
            return NSColor.colorWithDeviceRed_green_blue_alpha(valuesArray[0].floatValue(), valuesArray[1].floatValue(), valuesArray[2].floatValue(), valuesArray[3].floatValue())
        } else {
            return NSColor.whiteColor()
        }
    }

}

var saveOne = function(context) {
    run(context);

}

var saveAll = function(context) {
    run(context, true);
}